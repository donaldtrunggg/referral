# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  DB_CONNECTION: mysql
  MYSQL_HOST: localhost
  MYSQL_PORT: 33306
  MYSQL_USERNAME: root
  MYSQL_ROOT_PASSWORD: password
  MYSQL_DATABASE: db_test
  MYSQL_ENGINE: InnoDB
  MYSQL_CHARSET: utf8mb4
  MYSQL_COLLATE: utf8mb4_unicode_ci

jobs:
#  test-host:
#    runs-on: ubuntu-latest
#    services:
#      mysql:
#        image: mysql:5.7
#        env:
#          MYSQL_ROOT_PASSWORD: password
#        ports:
#          - 32574:3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#    steps:
#      - name: Verify MySQL connection from host
#        run: |
#          sudo apt-get install -y mysql-client
#          mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -e "SHOW DATABASES"

  build:
    strategy:
      matrix:
        node-version: [8]

    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: db_test
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Execute test
        run: echo $DB_CONNECTION

      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm install

      - name: Migrate Database
        run: |
          sudo service mysql restart
          sudo mysql -e "use mysql; update user set authentication_string=PASSWORD('') where User='root'; update user set plugin='mysql_native_password';FLUSH PRIVILEGES;"
          mysql -e "CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE CHARACTER SET $MYSQL_CHARSET COLLATE $MYSQL_COLLATE;"
          npm run db:migrate:downall
          npm run db:migrate:up

      - run: npm run build --if-present
      - name: Execute test
        run: echo $DB_CONNECTION


      - name: Generate deployment package
        run: zip -r deploy.zip * -x "**node_modules**"

      - name: Upload file
        uses: actions/upload-artifact@v1
        with:
          name: files
          path: deploy.zip

  publish_staging:
    needs: [build]
    strategy:
      matrix:
        node-version: [8]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download file from step building
        uses: actions/download-artifact@v1
        with:
          name: files

      - name: Deploy staging
        if: github.ref == 'refs/heads/develop'
        uses: einaregilsson/beanstalk-deploy@v4
        with:
          aws_access_key: ${{secrets.STAGING_AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.STAGING_AWS_SECRET_KEY}}
          application_name: 'SG Care'
          environment_name: 'SgCares-staging'
          region: 'ap-southeast-1'
          deployment_package: files/deploy.zip

      - name: Deployed staging successfully!
        run: echo App deployed to ELB staging

  publish_production:
    needs: [build]
    strategy:
      matrix:
        node-version: [8]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download math result for job 2
        uses: actions/download-artifact@v1
        with:
          name: files

      - name: Deploy production
        if: github.ref == 'refs/heads/master'
        uses: einaregilsson/beanstalk-deploy@v4
        with:
          aws_access_key: ${{secrets.PROD_AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.PROD_AWS_SECRET_KEY}}
          application_name: 'SG Care'
          environment_name: 'SgCares-production'
          region: 'ap-southeast-1'
          deployment_package: files/deploy.zip

      - name: Deployed production successfully!
        run: echo App deployed to ELB production
